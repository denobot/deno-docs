{
  "name": "deno",
  "about": null,
  "visible_aliases": [],
  "args": [
    {
      "name": "no-check",
      "short": null,
      "long": "no-check",
      "aliases": null,
      "required": false,
      "help": "Skip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored",
      "usage": "--no-check[=<NO_CHECK_TYPE>]"
    },
    {
      "name": "import-map",
      "short": null,
      "long": "import-map",
      "aliases": [],
      "required": false,
      "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
      "usage": "--import-map <FILE>"
    },
    {
      "name": "no-remote",
      "short": null,
      "long": "no-remote",
      "aliases": null,
      "required": false,
      "help": "Do not resolve remote modules",
      "usage": "--no-remote"
    },
    {
      "name": "no-npm",
      "short": null,
      "long": "no-npm",
      "aliases": null,
      "required": false,
      "help": "Do not resolve npm modules",
      "usage": "--no-npm"
    },
    {
      "name": "node-modules-dir",
      "short": null,
      "long": "node-modules-dir",
      "aliases": null,
      "required": false,
      "help": "Enables or disables the use of a local node_modules folder for npm packages",
      "usage": "--node-modules-dir[=<DIRECTORY>]"
    },
    {
      "name": "vendor",
      "short": null,
      "long": "vendor",
      "aliases": null,
      "required": false,
      "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
      "usage": "--vendor[=<vendor>]"
    },
    {
      "name": "config",
      "short": "c",
      "long": "config",
      "aliases": null,
      "required": false,
      "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
      "usage": "--config <FILE>"
    },
    {
      "name": "no-config",
      "short": null,
      "long": "no-config",
      "aliases": null,
      "required": false,
      "help": "Disable automatic loading of the configuration file",
      "usage": "--no-config"
    },
    {
      "name": "reload",
      "short": "r",
      "long": "reload",
      "aliases": null,
      "required": false,
      "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
      "usage": "--reload[=<CACHE_BLOCKLIST>...]"
    },
    {
      "name": "lock",
      "short": null,
      "long": "lock",
      "aliases": null,
      "required": false,
      "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
      "usage": "--lock [<FILE>]"
    },
    {
      "name": "no-lock",
      "short": null,
      "long": "no-lock",
      "aliases": null,
      "required": false,
      "help": "Disable auto discovery of the lock file",
      "usage": "--no-lock"
    },
    {
      "name": "cert",
      "short": null,
      "long": "cert",
      "aliases": null,
      "required": false,
      "help": "Load certificate authority from PEM encoded file",
      "usage": "--cert <FILE>"
    },
    {
      "name": "inspect",
      "short": null,
      "long": "inspect",
      "aliases": null,
      "required": false,
      "help": "Activate inspector on host:port [default: 127.0.0.1:9229]",
      "usage": "--inspect[=<HOST_AND_PORT>]"
    },
    {
      "name": "inspect-brk",
      "short": null,
      "long": "inspect-brk",
      "aliases": null,
      "required": false,
      "help": "Activate inspector on host:port, wait for debugger to connect and break at the start of user script",
      "usage": "--inspect-brk[=<HOST_AND_PORT>]"
    },
    {
      "name": "inspect-wait",
      "short": null,
      "long": "inspect-wait",
      "aliases": null,
      "required": false,
      "help": "Activate inspector on host:port and wait for debugger to connect before running user code",
      "usage": "--inspect-wait[=<HOST_AND_PORT>]"
    },
    {
      "name": "frozen",
      "short": null,
      "long": "frozen",
      "aliases": [],
      "required": false,
      "help": "Error out if lockfile is out of date",
      "usage": "--frozen[=<BOOLEAN>]"
    },
    {
      "name": "cached-only",
      "short": null,
      "long": "cached-only",
      "aliases": null,
      "required": false,
      "help": "Require that remote dependencies are already cached",
      "usage": "--cached-only"
    },
    {
      "name": "location",
      "short": null,
      "long": "location",
      "aliases": null,
      "required": false,
      "help": "Value of 'globalThis.location' used by some web APIs",
      "usage": "--location <HREF>"
    },
    {
      "name": "v8-flags",
      "short": null,
      "long": "v8-flags",
      "aliases": null,
      "required": false,
      "help": "To see a list of all available flags use --v8-flags=--help\n  Flags can also be set via the DENO_V8_FLAGS environment variable.\n  Any flags set with this flag are appended after the DENO_V8_FLAGS environment variable",
      "usage": "--v8-flags[=<V8_FLAGS>...]"
    },
    {
      "name": "seed",
      "short": null,
      "long": "seed",
      "aliases": null,
      "required": false,
      "help": "Set the random number generator seed",
      "usage": "--seed <NUMBER>"
    },
    {
      "name": "check",
      "short": null,
      "long": "check",
      "aliases": null,
      "required": false,
      "help": "Enable type-checking. This subcommand does not type-check by default\n  If the value of \"all\" is supplied, remote modules will be included.\n  Alternatively, the 'deno check' subcommand can be used",
      "usage": "--check[=<CHECK_TYPE>]"
    },
    {
      "name": "watch",
      "short": null,
      "long": "watch",
      "aliases": null,
      "required": false,
      "help": "Watch for file changes and restart process automatically.\n  Local files from entry point module graph are watched by default.\n  Additional paths might be watched by passing them as arguments to this flag.",
      "usage": "--watch[=<FILES>...]"
    },
    {
      "name": "hmr",
      "short": null,
      "long": "watch-hmr",
      "aliases": [],
      "required": false,
      "help": "Watch for file changes and restart process automatically.\n  Local files from entry point module graph are watched by default.\n  Additional paths might be watched by passing them as arguments to this flag.",
      "usage": "--watch-hmr[=<FILES>...]"
    },
    {
      "name": "watch-exclude",
      "short": null,
      "long": "watch-exclude",
      "aliases": null,
      "required": false,
      "help": "Exclude provided files/patterns from watch mode",
      "usage": "--watch-exclude[=<FILES>...]"
    },
    {
      "name": "no-clear-screen",
      "short": null,
      "long": "no-clear-screen",
      "aliases": null,
      "required": false,
      "help": "Do not clear terminal screen when under watch mode",
      "usage": "--no-clear-screen"
    },
    {
      "name": "ext",
      "short": null,
      "long": "ext",
      "aliases": null,
      "required": false,
      "help": "Set content type of the supplied file",
      "usage": "--ext <ext>"
    },
    {
      "name": "env-file",
      "short": null,
      "long": "env-file",
      "aliases": [],
      "required": false,
      "help": "Load environment variables from local file\n  Only the first environment variable with a given key is used.\n  Existing process environment variables are not overwritten.",
      "usage": "--env-file[=<FILE>]"
    },
    {
      "name": "no-code-cache",
      "short": null,
      "long": "no-code-cache",
      "aliases": null,
      "required": false,
      "help": "Disable V8 code cache feature",
      "usage": "--no-code-cache"
    },
    {
      "name": "unstable",
      "short": null,
      "long": "unstable",
      "aliases": null,
      "required": false,
      "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
      "usage": "--unstable"
    },
    {
      "name": "version",
      "short": "V",
      "long": "version",
      "aliases": null,
      "required": false,
      "help": "Print version",
      "usage": "--version"
    },
    {
      "name": "quiet",
      "short": "q",
      "long": "quiet",
      "aliases": null,
      "required": false,
      "help": "Suppress diagnostic output",
      "usage": "--quiet"
    }
  ],
  "subcommands": [
    {
      "name": "run",
      "about": "Run a JavaScript or TypeScript program, or a task or script.\n\nBy default all programs are run in sandbox without access to disk, network or ability to spawn subprocesses.\n  deno run https://examples.deno.land/hello-world.ts\n\nGrant permission to read from disk and listen to network:\n  deno run --allow-read --allow-net jsr:@std/http/file-server\n\nGrant permission to read allow-listed files from disk:\n  deno run --allow-read=/etc jsr:@std/http/file-server\n\nGrant all permissions:\n  deno run -A jsr:@std/http/file-server\n\nSpecifying the filename '-' to read the file from stdin.\n  curl https://examples.deno.land/hello-world.ts | deno run -",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "no-check",
          "short": null,
          "long": "no-check",
          "aliases": null,
          "required": false,
          "help": "Skip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored",
          "usage": "--no-check[=<NO_CHECK_TYPE>]"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        },
        {
          "name": "inspect",
          "short": null,
          "long": "inspect",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port [default: 127.0.0.1:9229]",
          "usage": "--inspect[=<HOST_AND_PORT>]"
        },
        {
          "name": "inspect-brk",
          "short": null,
          "long": "inspect-brk",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port, wait for debugger to connect and break at the start of user script",
          "usage": "--inspect-brk[=<HOST_AND_PORT>]"
        },
        {
          "name": "inspect-wait",
          "short": null,
          "long": "inspect-wait",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port and wait for debugger to connect before running user code",
          "usage": "--inspect-wait[=<HOST_AND_PORT>]"
        },
        {
          "name": "frozen",
          "short": null,
          "long": "frozen",
          "aliases": [],
          "required": false,
          "help": "Error out if lockfile is out of date",
          "usage": "--frozen[=<BOOLEAN>]"
        },
        {
          "name": "cached-only",
          "short": null,
          "long": "cached-only",
          "aliases": null,
          "required": false,
          "help": "Require that remote dependencies are already cached",
          "usage": "--cached-only"
        },
        {
          "name": "location",
          "short": null,
          "long": "location",
          "aliases": null,
          "required": false,
          "help": "Value of 'globalThis.location' used by some web APIs",
          "usage": "--location <HREF>"
        },
        {
          "name": "v8-flags",
          "short": null,
          "long": "v8-flags",
          "aliases": null,
          "required": false,
          "help": "To see a list of all available flags use --v8-flags=--help\n  Flags can also be set via the DENO_V8_FLAGS environment variable.\n  Any flags set with this flag are appended after the DENO_V8_FLAGS environment variable",
          "usage": "--v8-flags[=<V8_FLAGS>...]"
        },
        {
          "name": "seed",
          "short": null,
          "long": "seed",
          "aliases": null,
          "required": false,
          "help": "Set the random number generator seed",
          "usage": "--seed <NUMBER>"
        },
        {
          "name": "check",
          "short": null,
          "long": "check",
          "aliases": null,
          "required": false,
          "help": "Enable type-checking. This subcommand does not type-check by default\n  If the value of \"all\" is supplied, remote modules will be included.\n  Alternatively, the 'deno check' subcommand can be used",
          "usage": "--check[=<CHECK_TYPE>]"
        },
        {
          "name": "watch",
          "short": null,
          "long": "watch",
          "aliases": null,
          "required": false,
          "help": "Watch for file changes and restart process automatically.\n  Local files from entry point module graph are watched by default.\n  Additional paths might be watched by passing them as arguments to this flag.",
          "usage": "--watch[=<FILES>...]"
        },
        {
          "name": "hmr",
          "short": null,
          "long": "watch-hmr",
          "aliases": [],
          "required": false,
          "help": "Watch for file changes and restart process automatically.\n  Local files from entry point module graph are watched by default.\n  Additional paths might be watched by passing them as arguments to this flag.",
          "usage": "--watch-hmr[=<FILES>...]"
        },
        {
          "name": "watch-exclude",
          "short": null,
          "long": "watch-exclude",
          "aliases": null,
          "required": false,
          "help": "Exclude provided files/patterns from watch mode",
          "usage": "--watch-exclude[=<FILES>...]"
        },
        {
          "name": "no-clear-screen",
          "short": null,
          "long": "no-clear-screen",
          "aliases": null,
          "required": false,
          "help": "Do not clear terminal screen when under watch mode",
          "usage": "--no-clear-screen"
        },
        {
          "name": "ext",
          "short": null,
          "long": "ext",
          "aliases": null,
          "required": false,
          "help": "Set content type of the supplied file",
          "usage": "--ext <ext>"
        },
        {
          "name": "script_arg",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": "Script arg",
          "usage": "[SCRIPT_ARG]..."
        },
        {
          "name": "env-file",
          "short": null,
          "long": "env-file",
          "aliases": [],
          "required": false,
          "help": "Load environment variables from local file\n  Only the first environment variable with a given key is used.\n  Existing process environment variables are not overwritten.",
          "usage": "--env-file[=<FILE>]"
        },
        {
          "name": "no-code-cache",
          "short": null,
          "long": "no-code-cache",
          "aliases": null,
          "required": false,
          "help": "Disable V8 code cache feature",
          "usage": "--no-code-cache"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno run [OPTIONS] [SCRIPT_ARG]..."
    },
    {
      "name": "serve",
      "about": "Run a server defined in a main module\n\nThe serve command uses the default exports of the main module to determine which\nservers to start.\n\nSee https://docs.deno.com/runtime/manual/tools/serve for\nmore detailed information.\n\nStart a server defined in server.ts:\n\n  deno serve server.ts\n\nStart a server defined in server.ts, watching for changes and running on port 5050:\n\n  deno serve --watch --port 5050 server.ts",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "no-check",
          "short": null,
          "long": "no-check",
          "aliases": null,
          "required": false,
          "help": "Skip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored",
          "usage": "--no-check[=<NO_CHECK_TYPE>]"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        },
        {
          "name": "inspect",
          "short": null,
          "long": "inspect",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port [default: 127.0.0.1:9229]",
          "usage": "--inspect[=<HOST_AND_PORT>]"
        },
        {
          "name": "inspect-brk",
          "short": null,
          "long": "inspect-brk",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port, wait for debugger to connect and break at the start of user script",
          "usage": "--inspect-brk[=<HOST_AND_PORT>]"
        },
        {
          "name": "inspect-wait",
          "short": null,
          "long": "inspect-wait",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port and wait for debugger to connect before running user code",
          "usage": "--inspect-wait[=<HOST_AND_PORT>]"
        },
        {
          "name": "frozen",
          "short": null,
          "long": "frozen",
          "aliases": [],
          "required": false,
          "help": "Error out if lockfile is out of date",
          "usage": "--frozen[=<BOOLEAN>]"
        },
        {
          "name": "cached-only",
          "short": null,
          "long": "cached-only",
          "aliases": null,
          "required": false,
          "help": "Require that remote dependencies are already cached",
          "usage": "--cached-only"
        },
        {
          "name": "location",
          "short": null,
          "long": "location",
          "aliases": null,
          "required": false,
          "help": "Value of 'globalThis.location' used by some web APIs",
          "usage": "--location <HREF>"
        },
        {
          "name": "v8-flags",
          "short": null,
          "long": "v8-flags",
          "aliases": null,
          "required": false,
          "help": "To see a list of all available flags use --v8-flags=--help\n  Flags can also be set via the DENO_V8_FLAGS environment variable.\n  Any flags set with this flag are appended after the DENO_V8_FLAGS environment variable",
          "usage": "--v8-flags[=<V8_FLAGS>...]"
        },
        {
          "name": "seed",
          "short": null,
          "long": "seed",
          "aliases": null,
          "required": false,
          "help": "Set the random number generator seed",
          "usage": "--seed <NUMBER>"
        },
        {
          "name": "port",
          "short": null,
          "long": "port",
          "aliases": null,
          "required": false,
          "help": "The TCP port to serve on, defaulting to 8000. Pass 0 to pick a random free port",
          "usage": "--port <port>"
        },
        {
          "name": "host",
          "short": null,
          "long": "host",
          "aliases": null,
          "required": false,
          "help": "The TCP address to serve on, defaulting to 0.0.0.0 (all interfaces)",
          "usage": "--host <host>"
        },
        {
          "name": "parallel",
          "short": null,
          "long": "parallel",
          "aliases": null,
          "required": false,
          "help": "Run multiple server workers in parallel. Parallelism defaults to the number of available CPUs or the value of the DENO_JOBS environment variable",
          "usage": "--parallel"
        },
        {
          "name": "check",
          "short": null,
          "long": "check",
          "aliases": null,
          "required": false,
          "help": "Enable type-checking. This subcommand does not type-check by default\n  If the value of \"all\" is supplied, remote modules will be included.\n  Alternatively, the 'deno check' subcommand can be used",
          "usage": "--check[=<CHECK_TYPE>]"
        },
        {
          "name": "watch",
          "short": null,
          "long": "watch",
          "aliases": null,
          "required": false,
          "help": "Watch for file changes and restart process automatically.\n  Local files from entry point module graph are watched by default.\n  Additional paths might be watched by passing them as arguments to this flag.",
          "usage": "--watch[=<FILES>...]"
        },
        {
          "name": "hmr",
          "short": null,
          "long": "watch-hmr",
          "aliases": [],
          "required": false,
          "help": "Watch for file changes and restart process automatically.\n  Local files from entry point module graph are watched by default.\n  Additional paths might be watched by passing them as arguments to this flag.",
          "usage": "--watch-hmr[=<FILES>...]"
        },
        {
          "name": "watch-exclude",
          "short": null,
          "long": "watch-exclude",
          "aliases": null,
          "required": false,
          "help": "Exclude provided files/patterns from watch mode",
          "usage": "--watch-exclude[=<FILES>...]"
        },
        {
          "name": "no-clear-screen",
          "short": null,
          "long": "no-clear-screen",
          "aliases": null,
          "required": false,
          "help": "Do not clear terminal screen when under watch mode",
          "usage": "--no-clear-screen"
        },
        {
          "name": "ext",
          "short": null,
          "long": "ext",
          "aliases": null,
          "required": false,
          "help": "Set content type of the supplied file",
          "usage": "--ext <ext>"
        },
        {
          "name": "script_arg",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": "Script arg",
          "usage": "[SCRIPT_ARG]..."
        },
        {
          "name": "env-file",
          "short": null,
          "long": "env-file",
          "aliases": [],
          "required": false,
          "help": "Load environment variables from local file\n  Only the first environment variable with a given key is used.\n  Existing process environment variables are not overwritten.",
          "usage": "--env-file[=<FILE>]"
        },
        {
          "name": "no-code-cache",
          "short": null,
          "long": "no-code-cache",
          "aliases": null,
          "required": false,
          "help": "Disable V8 code cache feature",
          "usage": "--no-code-cache"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno serve [OPTIONS] [SCRIPT_ARG]..."
    },
    {
      "name": "add",
      "about": "Add dependencies to the configuration file.\n\n  deno add @std/path\n\nYou can add multiple dependencies at once:\n  deno add @std/path @std/assert\n",
      "visible_aliases": [],
      "args": [
        {
          "name": "packages",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": "List of packages to add",
          "usage": "[packages]..."
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno add [OPTIONS] [packages]..."
    },
    {
      "name": "remove",
      "about": "Remove dependencies from the configuration file.\n\n  deno remove @std/path\n\nYou can remove multiple dependencies at once:\n  deno remove @std/path @std/assert\n",
      "visible_aliases": [],
      "args": [
        {
          "name": "packages",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": "List of packages to remove",
          "usage": "[packages]..."
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno remove [OPTIONS] [packages]..."
    },
    {
      "name": "bench",
      "about": "Run benchmarks using Deno's built-in bench tool.\n\nEvaluate the given modules, run all benches declared with 'Deno.bench()'\nand report results to standard output:\n  deno bench src/fetch_bench.ts src/signal_bench.ts\n\nDirectory arguments are expanded to all contained files matching the\nglob {*_,*.,}bench.{js,mjs,ts,mts,jsx,tsx}:\n  deno bench src/",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "no-check",
          "short": null,
          "long": "no-check",
          "aliases": null,
          "required": false,
          "help": "Skip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored",
          "usage": "--no-check[=<NO_CHECK_TYPE>]"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        },
        {
          "name": "frozen",
          "short": null,
          "long": "frozen",
          "aliases": [],
          "required": false,
          "help": "Error out if lockfile is out of date",
          "usage": "--frozen[=<BOOLEAN>]"
        },
        {
          "name": "cached-only",
          "short": null,
          "long": "cached-only",
          "aliases": null,
          "required": false,
          "help": "Require that remote dependencies are already cached",
          "usage": "--cached-only"
        },
        {
          "name": "location",
          "short": null,
          "long": "location",
          "aliases": null,
          "required": false,
          "help": "Value of 'globalThis.location' used by some web APIs",
          "usage": "--location <HREF>"
        },
        {
          "name": "v8-flags",
          "short": null,
          "long": "v8-flags",
          "aliases": null,
          "required": false,
          "help": "To see a list of all available flags use --v8-flags=--help\n  Flags can also be set via the DENO_V8_FLAGS environment variable.\n  Any flags set with this flag are appended after the DENO_V8_FLAGS environment variable",
          "usage": "--v8-flags[=<V8_FLAGS>...]"
        },
        {
          "name": "seed",
          "short": null,
          "long": "seed",
          "aliases": null,
          "required": false,
          "help": "Set the random number generator seed",
          "usage": "--seed <NUMBER>"
        },
        {
          "name": "check",
          "short": null,
          "long": "check",
          "aliases": null,
          "required": false,
          "help": "Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant\n  If the value of \"all\" is supplied, remote modules will be included.\n  Alternatively, the 'deno check' subcommand can be used",
          "usage": "--check[=<CHECK_TYPE>]"
        },
        {
          "name": "json",
          "short": null,
          "long": "json",
          "aliases": null,
          "required": false,
          "help": "UNSTABLE: Output benchmark result in JSON format",
          "usage": "--json"
        },
        {
          "name": "ignore",
          "short": null,
          "long": "ignore",
          "aliases": null,
          "required": false,
          "help": "Ignore files",
          "usage": "--ignore=<ignore>..."
        },
        {
          "name": "filter",
          "short": null,
          "long": "filter",
          "aliases": null,
          "required": false,
          "help": "Run benchmarks with this string or regexp pattern in the bench name",
          "usage": "--filter <filter>"
        },
        {
          "name": "files",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": "List of file names to run",
          "usage": "[files]..."
        },
        {
          "name": "no-run",
          "short": null,
          "long": "no-run",
          "aliases": null,
          "required": false,
          "help": "Cache bench modules, but don't run benchmarks",
          "usage": "--no-run"
        },
        {
          "name": "watch",
          "short": null,
          "long": "watch",
          "aliases": null,
          "required": false,
          "help": "Watch for file changes and restart process automatically.\n  Only local files from entry point module graph are watched.",
          "usage": "--watch"
        },
        {
          "name": "watch-exclude",
          "short": null,
          "long": "watch-exclude",
          "aliases": null,
          "required": false,
          "help": "Exclude provided files/patterns from watch mode",
          "usage": "--watch-exclude[=<FILES>...]"
        },
        {
          "name": "no-clear-screen",
          "short": null,
          "long": "no-clear-screen",
          "aliases": null,
          "required": false,
          "help": "Do not clear terminal screen when under watch mode",
          "usage": "--no-clear-screen"
        },
        {
          "name": "script_arg",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": "Script arg",
          "usage": "[SCRIPT_ARG]..."
        },
        {
          "name": "env-file",
          "short": null,
          "long": "env-file",
          "aliases": [],
          "required": false,
          "help": "Load environment variables from local file\n  Only the first environment variable with a given key is used.\n  Existing process environment variables are not overwritten.",
          "usage": "--env-file[=<FILE>]"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno bench [OPTIONS] [files]... [-- [SCRIPT_ARG]...]"
    },
    {
      "name": "bundle",
      "about": "⚠️ Warning: `deno bundle` is deprecated and will be removed in Deno 2.0.\nUse an alternative bundler like \"deno_emit\", \"esbuild\" or \"rollup\" instead.\n\nOutput a single JavaScript file with all dependencies.\n  deno bundle jsr:@std/http/file-server file_server.bundle.js\n\nIf no output file is given, the output is written to standard output:\n  deno bundle jsr:@std/http/file-server",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "no-check",
          "short": null,
          "long": "no-check",
          "aliases": null,
          "required": false,
          "help": "Skip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored",
          "usage": "--no-check[=<NO_CHECK_TYPE>]"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        },
        {
          "name": "check",
          "short": null,
          "long": "check",
          "aliases": null,
          "required": false,
          "help": "Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant\n  If the value of \"all\" is supplied, remote modules will be included.\n  Alternatively, the 'deno check' subcommand can be used",
          "usage": "--check[=<CHECK_TYPE>]"
        },
        {
          "name": "source_file",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[source_file]"
        },
        {
          "name": "out_file",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[out_file]"
        },
        {
          "name": "watch",
          "short": null,
          "long": "watch",
          "aliases": null,
          "required": false,
          "help": "Watch for file changes and restart process automatically.\n  Only local files from entry point module graph are watched.",
          "usage": "--watch"
        },
        {
          "name": "watch-exclude",
          "short": null,
          "long": "watch-exclude",
          "aliases": null,
          "required": false,
          "help": "Exclude provided files/patterns from watch mode",
          "usage": "--watch-exclude[=<FILES>...]"
        },
        {
          "name": "no-clear-screen",
          "short": null,
          "long": "no-clear-screen",
          "aliases": null,
          "required": false,
          "help": "Do not clear terminal screen when under watch mode",
          "usage": "--no-clear-screen"
        },
        {
          "name": "ext",
          "short": null,
          "long": "ext",
          "aliases": null,
          "required": false,
          "help": "Set content type of the supplied file",
          "usage": "--ext <ext>"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno bundle [OPTIONS] [source_file] [out_file]"
    },
    {
      "name": "cache",
      "about": "Cache and compile remote dependencies recursively.\n\nDownload and compile a module with all of its static dependencies and save\nthem in the local cache, without running any code:\n  deno cache jsr:@std/http/file-server\n\nFuture runs of this module will trigger no downloads or compilation unless\n--reload is specified.",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "no-check",
          "short": null,
          "long": "no-check",
          "aliases": null,
          "required": false,
          "help": "Skip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored",
          "usage": "--no-check[=<NO_CHECK_TYPE>]"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        },
        {
          "name": "check",
          "short": null,
          "long": "check",
          "aliases": null,
          "required": false,
          "help": "Enable type-checking. This subcommand does not type-check by default\n  If the value of \"all\" is supplied, remote modules will be included.\n  Alternatively, the 'deno check' subcommand can be used",
          "usage": "--check[=<CHECK_TYPE>]"
        },
        {
          "name": "file",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[file]..."
        },
        {
          "name": "frozen",
          "short": null,
          "long": "frozen",
          "aliases": [],
          "required": false,
          "help": "Error out if lockfile is out of date",
          "usage": "--frozen[=<BOOLEAN>]"
        },
        {
          "name": "allow-scripts",
          "short": null,
          "long": "allow-scripts",
          "aliases": null,
          "required": false,
          "help": "Allow running npm lifecycle scripts for the given packages\n  Note: Scripts will only be executed when using a node_modules directory (`--node-modules-dir`)",
          "usage": "--allow-scripts[=<PACKAGE>...]"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno cache [OPTIONS] [file]..."
    },
    {
      "name": "check",
      "about": "Download and type-check without execution.\n\n  deno check jsr:@std/http/file-server\n\nUnless --reload is specified, this command will not re-download already cached dependencies.",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        },
        {
          "name": "all",
          "short": null,
          "long": "all",
          "aliases": null,
          "required": false,
          "help": "Type-check all code, including remote modules and npm packages",
          "usage": "--all"
        },
        {
          "name": "file",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[file]..."
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno check [OPTIONS] [file]..."
    },
    {
      "name": "clean",
      "about": "Remove the cache directory ($DENO_DIR)",
      "visible_aliases": [],
      "args": [],
      "subcommands": [],
      "usage": "Usage: deno clean [OPTIONS]"
    },
    {
      "name": "compile",
      "about": "Compiles the given script into a self contained executable.\n\n  deno compile -A jsr:@std/http/file-server\n  deno compile --output file_server jsr:@std/http/file-server\n\nAny flags passed which affect runtime behavior, such as '--unstable',\n'--allow-*', '--v8-flags', etc. are encoded into the output executable and\nused at runtime as if they were passed to a similar 'deno run' command.\n\nThe executable name is inferred by default: Attempt to take the file stem of\nthe URL path. The above example would become 'file_server'. If the file stem\nis something generic like 'main', 'mod', 'index' or 'cli', and the path has no\nparent, take the file name of the parent path. Otherwise settle with the\ngeneric name. If the resulting name has an '@...' suffix, strip it.\n\nCross-compiling to different target architectures is supported using the\n`--target` flag. On the first invocation with deno will download proper\nbinary and cache it in $DENO_DIR. The aarch64-apple-darwin target is not\nsupported in canary.\n",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "no-check",
          "short": null,
          "long": "no-check",
          "aliases": null,
          "required": false,
          "help": "Skip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored",
          "usage": "--no-check[=<NO_CHECK_TYPE>]"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        },
        {
          "name": "frozen",
          "short": null,
          "long": "frozen",
          "aliases": [],
          "required": false,
          "help": "Error out if lockfile is out of date",
          "usage": "--frozen[=<BOOLEAN>]"
        },
        {
          "name": "cached-only",
          "short": null,
          "long": "cached-only",
          "aliases": null,
          "required": false,
          "help": "Require that remote dependencies are already cached",
          "usage": "--cached-only"
        },
        {
          "name": "location",
          "short": null,
          "long": "location",
          "aliases": null,
          "required": false,
          "help": "Value of 'globalThis.location' used by some web APIs",
          "usage": "--location <HREF>"
        },
        {
          "name": "v8-flags",
          "short": null,
          "long": "v8-flags",
          "aliases": null,
          "required": false,
          "help": "To see a list of all available flags use --v8-flags=--help\n  Flags can also be set via the DENO_V8_FLAGS environment variable.\n  Any flags set with this flag are appended after the DENO_V8_FLAGS environment variable",
          "usage": "--v8-flags[=<V8_FLAGS>...]"
        },
        {
          "name": "seed",
          "short": null,
          "long": "seed",
          "aliases": null,
          "required": false,
          "help": "Set the random number generator seed",
          "usage": "--seed <NUMBER>"
        },
        {
          "name": "check",
          "short": null,
          "long": "check",
          "aliases": null,
          "required": false,
          "help": "Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant\n  If the value of \"all\" is supplied, remote modules will be included.\n  Alternatively, the 'deno check' subcommand can be used",
          "usage": "--check[=<CHECK_TYPE>]"
        },
        {
          "name": "include",
          "short": null,
          "long": "include",
          "aliases": null,
          "required": false,
          "help": "Includes an additional module in the compiled executable's module graph.\n  Use this flag if a dynamically imported module or a web worker main module\n  fails to load in the executable. This flag can be passed multiple times,\n  to include multiple additional modules.",
          "usage": "--include <include>"
        },
        {
          "name": "output",
          "short": "o",
          "long": "output",
          "aliases": null,
          "required": false,
          "help": "Output file (defaults to $PWD/<inferred-name>)",
          "usage": "--output <output>"
        },
        {
          "name": "target",
          "short": null,
          "long": "target",
          "aliases": null,
          "required": false,
          "help": "Target OS architecture",
          "usage": "--target <target>"
        },
        {
          "name": "no-terminal",
          "short": null,
          "long": "no-terminal",
          "aliases": null,
          "required": false,
          "help": "Hide terminal on Windows",
          "usage": "--no-terminal"
        },
        {
          "name": "icon",
          "short": null,
          "long": "icon",
          "aliases": null,
          "required": false,
          "help": "Set the icon of the executable on Windows (.ico)",
          "usage": "--icon <icon>"
        },
        {
          "name": "ext",
          "short": null,
          "long": "ext",
          "aliases": null,
          "required": false,
          "help": "Set content type of the supplied file",
          "usage": "--ext <ext>"
        },
        {
          "name": "env-file",
          "short": null,
          "long": "env-file",
          "aliases": [],
          "required": false,
          "help": "Load environment variables from local file\n  Only the first environment variable with a given key is used.\n  Existing process environment variables are not overwritten.",
          "usage": "--env-file[=<FILE>]"
        },
        {
          "name": "script_arg",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": "Script arg",
          "usage": "[SCRIPT_ARG]..."
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno compile [OPTIONS] [SCRIPT_ARG]..."
    },
    {
      "name": "completions",
      "about": "Output shell completion script to standard output.\n\n  deno completions bash > /usr/local/etc/bash_completion.d/deno.bash\n  source /usr/local/etc/bash_completion.d/deno.bash",
      "visible_aliases": [],
      "args": [
        {
          "name": "shell",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[shell]"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno completions [OPTIONS] [shell]"
    },
    {
      "name": "coverage",
      "about": "Print coverage reports from coverage profiles.\n\nCollect a coverage profile with deno test:\n  deno test --coverage=cov_profile\n\nPrint a report to stdout:\n  deno coverage cov_profile\n\nInclude urls that start with the file schema:\n  deno coverage --include=\"^file:\" cov_profile\n\nExclude urls ending with test.ts and test.js:\n  deno coverage --exclude=\"test\\.(ts|js)\" cov_profile\n\nInclude urls that start with the file schema and exclude files ending with\ntest.ts and test.js, for an url to match it must match the include pattern and\nnot match the exclude pattern:\n  deno coverage --include=\"^file:\" --exclude=\"test\\.(ts|js)\" cov_profile\n\nWrite a report using the lcov format:\n  deno coverage --lcov --output=cov.lcov cov_profile/\n\nGenerate html reports from lcov:\n  genhtml -o html_cov cov.lcov\n",
      "visible_aliases": [],
      "args": [
        {
          "name": "ignore",
          "short": null,
          "long": "ignore",
          "aliases": null,
          "required": false,
          "help": "Ignore coverage files",
          "usage": "--ignore=<ignore>..."
        },
        {
          "name": "include",
          "short": null,
          "long": "include",
          "aliases": null,
          "required": false,
          "help": "Include source files in the report",
          "usage": "--include=<regex>..."
        },
        {
          "name": "exclude",
          "short": null,
          "long": "exclude",
          "aliases": null,
          "required": false,
          "help": "Exclude source files from the report",
          "usage": "--exclude=<regex>..."
        },
        {
          "name": "lcov",
          "short": null,
          "long": "lcov",
          "aliases": null,
          "required": false,
          "help": "Output coverage report in lcov format",
          "usage": "--lcov"
        },
        {
          "name": "output",
          "short": null,
          "long": "output",
          "aliases": null,
          "required": false,
          "help": "Exports the coverage report in lcov format to the given file.\n  If no --output arg is specified then the report is written to stdout.",
          "usage": "--output=<output>"
        },
        {
          "name": "html",
          "short": null,
          "long": "html",
          "aliases": null,
          "required": false,
          "help": "Output coverage report in HTML format in the given directory",
          "usage": "--html"
        },
        {
          "name": "detailed",
          "short": null,
          "long": "detailed",
          "aliases": null,
          "required": false,
          "help": "Output coverage report in detailed format in the terminal",
          "usage": "--detailed"
        },
        {
          "name": "files",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[files]..."
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno coverage [OPTIONS] [files]..."
    },
    {
      "name": "doc",
      "about": "Show documentation for a module.\n\nOutput documentation to standard output:\n    deno doc ./path/to/module.ts\n\nOutput documentation in HTML format:\n    deno doc --html --name=\"My library\" ./path/to/module.ts\n    deno doc --html --name=\"My library\" ./main.ts ./dev.ts\n    deno doc --html --name=\"My library\" --output=./documentation/ ./path/to/module.ts\n\nOutput private documentation to standard output:\n    deno doc --private ./path/to/module.ts\n\nOutput documentation in JSON format:\n    deno doc --json ./path/to/module.ts\n\nLint a module for documentation diagnostics:\n    deno doc --lint ./path/to/module.ts\n\nTarget a specific symbol:\n    deno doc ./path/to/module.ts MyClass.someField\n\nShow documentation for runtime built-ins:\n    deno doc\n    deno doc --filter Deno.Listener",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "json",
          "short": null,
          "long": "json",
          "aliases": null,
          "required": false,
          "help": "Output documentation in JSON format",
          "usage": "--json"
        },
        {
          "name": "html",
          "short": null,
          "long": "html",
          "aliases": null,
          "required": false,
          "help": "Output documentation in HTML format",
          "usage": "--html"
        },
        {
          "name": "name",
          "short": null,
          "long": "name",
          "aliases": null,
          "required": false,
          "help": "The name that will be used in the docs (ie for breadcrumbs)",
          "usage": "--name=<name>"
        },
        {
          "name": "category-docs",
          "short": null,
          "long": "category-docs",
          "aliases": null,
          "required": false,
          "help": "Path to a JSON file keyed by category and an optional value of a markdown doc",
          "usage": "--category-docs=<category-docs>"
        },
        {
          "name": "symbol-redirect-map",
          "short": null,
          "long": "symbol-redirect-map",
          "aliases": null,
          "required": false,
          "help": "Path to a JSON file keyed by file, with an inner map of symbol to an external link",
          "usage": "--symbol-redirect-map=<symbol-redirect-map>"
        },
        {
          "name": "strip-trailing-html",
          "short": null,
          "long": "strip-trailing-html",
          "aliases": null,
          "required": false,
          "help": "Remove trailing .html from various links. Will still generate files with a .html extension",
          "usage": "--strip-trailing-html"
        },
        {
          "name": "default-symbol-map",
          "short": null,
          "long": "default-symbol-map",
          "aliases": null,
          "required": false,
          "help": "Uses the provided mapping of default name to wanted name for usage blocks",
          "usage": "--default-symbol-map=<default-symbol-map>"
        },
        {
          "name": "output",
          "short": null,
          "long": "output",
          "aliases": null,
          "required": false,
          "help": "Directory for HTML documentation output",
          "usage": "--output=<output>"
        },
        {
          "name": "private",
          "short": null,
          "long": "private",
          "aliases": null,
          "required": false,
          "help": "Output private documentation",
          "usage": "--private"
        },
        {
          "name": "filter",
          "short": null,
          "long": "filter",
          "aliases": null,
          "required": false,
          "help": "Dot separated path to symbol",
          "usage": "--filter <filter>"
        },
        {
          "name": "lint",
          "short": null,
          "long": "lint",
          "aliases": null,
          "required": false,
          "help": "Output documentation diagnostics.",
          "usage": "--lint"
        },
        {
          "name": "source_file",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[source_file]..."
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno doc [OPTIONS] [source_file]..."
    },
    {
      "name": "eval",
      "about": "Evaluate JavaScript from the command line.\n\n  deno eval \"console.log('hello world')\"\n\nTo evaluate as TypeScript:\n  deno eval --ext=ts \"const v: string = 'hello'; console.log(v)\"\n\nThis command has implicit access to all permissions (--allow-all).",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "no-check",
          "short": null,
          "long": "no-check",
          "aliases": null,
          "required": false,
          "help": "Skip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored",
          "usage": "--no-check[=<NO_CHECK_TYPE>]"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        },
        {
          "name": "inspect",
          "short": null,
          "long": "inspect",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port [default: 127.0.0.1:9229]",
          "usage": "--inspect[=<HOST_AND_PORT>]"
        },
        {
          "name": "inspect-brk",
          "short": null,
          "long": "inspect-brk",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port, wait for debugger to connect and break at the start of user script",
          "usage": "--inspect-brk[=<HOST_AND_PORT>]"
        },
        {
          "name": "inspect-wait",
          "short": null,
          "long": "inspect-wait",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port and wait for debugger to connect before running user code",
          "usage": "--inspect-wait[=<HOST_AND_PORT>]"
        },
        {
          "name": "frozen",
          "short": null,
          "long": "frozen",
          "aliases": [],
          "required": false,
          "help": "Error out if lockfile is out of date",
          "usage": "--frozen[=<BOOLEAN>]"
        },
        {
          "name": "cached-only",
          "short": null,
          "long": "cached-only",
          "aliases": null,
          "required": false,
          "help": "Require that remote dependencies are already cached",
          "usage": "--cached-only"
        },
        {
          "name": "location",
          "short": null,
          "long": "location",
          "aliases": null,
          "required": false,
          "help": "Value of 'globalThis.location' used by some web APIs",
          "usage": "--location <HREF>"
        },
        {
          "name": "v8-flags",
          "short": null,
          "long": "v8-flags",
          "aliases": null,
          "required": false,
          "help": "To see a list of all available flags use --v8-flags=--help\n  Flags can also be set via the DENO_V8_FLAGS environment variable.\n  Any flags set with this flag are appended after the DENO_V8_FLAGS environment variable",
          "usage": "--v8-flags[=<V8_FLAGS>...]"
        },
        {
          "name": "seed",
          "short": null,
          "long": "seed",
          "aliases": null,
          "required": false,
          "help": "Set the random number generator seed",
          "usage": "--seed <NUMBER>"
        },
        {
          "name": "check",
          "short": null,
          "long": "check",
          "aliases": null,
          "required": false,
          "help": "Enable type-checking. This subcommand does not type-check by default\n  If the value of \"all\" is supplied, remote modules will be included.\n  Alternatively, the 'deno check' subcommand can be used",
          "usage": "--check[=<CHECK_TYPE>]"
        },
        {
          "name": "ext",
          "short": null,
          "long": "ext",
          "aliases": null,
          "required": false,
          "help": "Set content type of the supplied file",
          "usage": "--ext <ext>"
        },
        {
          "name": "print",
          "short": "p",
          "long": "print",
          "aliases": null,
          "required": false,
          "help": "print result to stdout",
          "usage": "--print"
        },
        {
          "name": "code_arg",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": "Code to evaluate",
          "usage": "[CODE_ARG]..."
        },
        {
          "name": "env-file",
          "short": null,
          "long": "env-file",
          "aliases": [],
          "required": false,
          "help": "Load environment variables from local file\n  Only the first environment variable with a given key is used.\n  Existing process environment variables are not overwritten.",
          "usage": "--env-file[=<FILE>]"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno eval [OPTIONS] [CODE_ARG]..."
    },
    {
      "name": "fmt",
      "about": "Auto-format JavaScript, TypeScript, Markdown, and JSON files.\n\n  deno fmt\n  deno fmt myfile1.ts myfile2.ts\n  deno fmt --check\n\nFormat stdin and write to stdout:\n  cat file.ts | deno fmt -\n\nIgnore formatting code by preceding it with an ignore comment:\n  // deno-fmt-ignore\n\nIgnore formatting a file by adding an ignore comment at the top of the file:\n  // deno-fmt-ignore-file",
      "visible_aliases": [],
      "args": [
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "check",
          "short": null,
          "long": "check",
          "aliases": null,
          "required": false,
          "help": "Check if the source files are formatted",
          "usage": "--check"
        },
        {
          "name": "ext",
          "short": null,
          "long": "ext",
          "aliases": null,
          "required": false,
          "help": "Set content type of the supplied file",
          "usage": "--ext <ext>"
        },
        {
          "name": "ignore",
          "short": null,
          "long": "ignore",
          "aliases": null,
          "required": false,
          "help": "Ignore formatting particular source files",
          "usage": "--ignore=<ignore>..."
        },
        {
          "name": "files",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[files]..."
        },
        {
          "name": "watch",
          "short": null,
          "long": "watch",
          "aliases": null,
          "required": false,
          "help": "Watch for file changes and restart process automatically.\n  Only local files from entry point module graph are watched.",
          "usage": "--watch"
        },
        {
          "name": "watch-exclude",
          "short": null,
          "long": "watch-exclude",
          "aliases": null,
          "required": false,
          "help": "Exclude provided files/patterns from watch mode",
          "usage": "--watch-exclude[=<FILES>...]"
        },
        {
          "name": "no-clear-screen",
          "short": null,
          "long": "no-clear-screen",
          "aliases": null,
          "required": false,
          "help": "Do not clear terminal screen when under watch mode",
          "usage": "--no-clear-screen"
        },
        {
          "name": "use-tabs",
          "short": null,
          "long": "use-tabs",
          "aliases": [],
          "required": false,
          "help": "Use tabs instead of spaces for indentation [default: false]",
          "usage": "--use-tabs[=<use-tabs>]"
        },
        {
          "name": "line-width",
          "short": null,
          "long": "line-width",
          "aliases": [],
          "required": false,
          "help": "Define maximum line width [default: 80]",
          "usage": "--line-width <line-width>"
        },
        {
          "name": "indent-width",
          "short": null,
          "long": "indent-width",
          "aliases": [],
          "required": false,
          "help": "Define indentation width [default: 2]",
          "usage": "--indent-width <indent-width>"
        },
        {
          "name": "single-quote",
          "short": null,
          "long": "single-quote",
          "aliases": [],
          "required": false,
          "help": "Use single quotes [default: false]",
          "usage": "--single-quote[=<single-quote>]"
        },
        {
          "name": "prose-wrap",
          "short": null,
          "long": "prose-wrap",
          "aliases": [],
          "required": false,
          "help": "Define how prose should be wrapped [default: always]",
          "usage": "--prose-wrap <prose-wrap>"
        },
        {
          "name": "no-semicolons",
          "short": null,
          "long": "no-semicolons",
          "aliases": [],
          "required": false,
          "help": "Don't use semicolons except where necessary [default: false]",
          "usage": "--no-semicolons[=<no-semicolons>]"
        },
        {
          "name": "unstable-css",
          "short": null,
          "long": "unstable-css",
          "aliases": null,
          "required": false,
          "help": "Enable formatting CSS, SCSS, Sass and Less files",
          "usage": "--unstable-css"
        },
        {
          "name": "unstable-html",
          "short": null,
          "long": "unstable-html",
          "aliases": null,
          "required": false,
          "help": "Enable formatting HTML files",
          "usage": "--unstable-html"
        },
        {
          "name": "unstable-component",
          "short": null,
          "long": "unstable-component",
          "aliases": null,
          "required": false,
          "help": "Enable formatting Svelte, Vue, Astro and Angular files",
          "usage": "--unstable-component"
        },
        {
          "name": "unstable-yaml",
          "short": null,
          "long": "unstable-yaml",
          "aliases": null,
          "required": false,
          "help": "Enable formatting YAML files",
          "usage": "--unstable-yaml"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno fmt [OPTIONS] [files]..."
    },
    {
      "name": "init",
      "about": "Initialize a new project",
      "visible_aliases": [],
      "args": [
        {
          "name": "dir",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[dir]"
        },
        {
          "name": "lib",
          "short": null,
          "long": "lib",
          "aliases": null,
          "required": false,
          "help": "Generate an example library project",
          "usage": "--lib"
        },
        {
          "name": "serve",
          "short": null,
          "long": "serve",
          "aliases": null,
          "required": false,
          "help": "Generate an example project for `deno serve`",
          "usage": "--serve"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno init [OPTIONS] [dir]"
    },
    {
      "name": "info",
      "about": "Information about a module or the cache directories.\n\nGet information about a module:\n  deno info jsr:@std/http/file-server\n\nThe following information is shown:\n\nlocal: Local path of the file.\ntype: JavaScript, TypeScript, or JSON.\nemit: Local path of compiled source code. (TypeScript only.)\ndependencies: Dependency tree of the source file.\n\nWithout any additional arguments, 'deno info' shows:\n\nDENO_DIR: Directory containing Deno-managed files.\nRemote modules cache: Subdirectory containing downloaded remote modules.\nTypeScript compiler cache: Subdirectory containing TS compiler output.",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "file",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[file]"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        },
        {
          "name": "location",
          "short": null,
          "long": "location",
          "aliases": null,
          "required": false,
          "help": "Show files used for origin bound APIs like the Web Storage API when running a script with '--location=<HREF>'",
          "usage": "--location <HREF>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "json",
          "short": null,
          "long": "json",
          "aliases": null,
          "required": false,
          "help": "UNSTABLE: Outputs the information in JSON format",
          "usage": "--json"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno info [OPTIONS] [file]"
    },
    {
      "name": "install",
      "about": "Installs a script as an executable in the installation root's bin directory.\n\n  deno install --global --allow-net --allow-read jsr:@std/http/file-server\n  deno install -g https://examples.deno.land/color-logging.ts\n\nTo change the executable name, use -n/--name:\n  deno install -g --allow-net --allow-read -n serve jsr:@std/http/file-server\n\nThe executable name is inferred by default:\n  - Attempt to take the file stem of the URL path. The above example would\n    become 'file_server'.\n  - If the file stem is something generic like 'main', 'mod', 'index' or 'cli',\n    and the path has no parent, take the file name of the parent path. Otherwise\n    settle with the generic name.\n  - If the resulting name has an '@...' suffix, strip it.\n\nTo change the installation root, use --root:\n  deno install -g --allow-net --allow-read --root /usr/local jsr:@std/http/file-server\n\nThe installation root is determined, in order of precedence:\n  - --root option\n  - DENO_INSTALL_ROOT environment variable\n  - $HOME/.deno\n\nThese must be added to the path manually if required.",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "no-check",
          "short": null,
          "long": "no-check",
          "aliases": null,
          "required": false,
          "help": "Skip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored",
          "usage": "--no-check[=<NO_CHECK_TYPE>]"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        },
        {
          "name": "inspect",
          "short": null,
          "long": "inspect",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port [default: 127.0.0.1:9229]",
          "usage": "--inspect[=<HOST_AND_PORT>]"
        },
        {
          "name": "inspect-brk",
          "short": null,
          "long": "inspect-brk",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port, wait for debugger to connect and break at the start of user script",
          "usage": "--inspect-brk[=<HOST_AND_PORT>]"
        },
        {
          "name": "inspect-wait",
          "short": null,
          "long": "inspect-wait",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port and wait for debugger to connect before running user code",
          "usage": "--inspect-wait[=<HOST_AND_PORT>]"
        },
        {
          "name": "frozen",
          "short": null,
          "long": "frozen",
          "aliases": [],
          "required": false,
          "help": "Error out if lockfile is out of date",
          "usage": "--frozen[=<BOOLEAN>]"
        },
        {
          "name": "cached-only",
          "short": null,
          "long": "cached-only",
          "aliases": null,
          "required": false,
          "help": "Require that remote dependencies are already cached",
          "usage": "--cached-only"
        },
        {
          "name": "location",
          "short": null,
          "long": "location",
          "aliases": null,
          "required": false,
          "help": "Value of 'globalThis.location' used by some web APIs",
          "usage": "--location <HREF>"
        },
        {
          "name": "v8-flags",
          "short": null,
          "long": "v8-flags",
          "aliases": null,
          "required": false,
          "help": "To see a list of all available flags use --v8-flags=--help\n  Flags can also be set via the DENO_V8_FLAGS environment variable.\n  Any flags set with this flag are appended after the DENO_V8_FLAGS environment variable",
          "usage": "--v8-flags[=<V8_FLAGS>...]"
        },
        {
          "name": "seed",
          "short": null,
          "long": "seed",
          "aliases": null,
          "required": false,
          "help": "Set the random number generator seed",
          "usage": "--seed <NUMBER>"
        },
        {
          "name": "check",
          "short": null,
          "long": "check",
          "aliases": null,
          "required": false,
          "help": "Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant\n  If the value of \"all\" is supplied, remote modules will be included.\n  Alternatively, the 'deno check' subcommand can be used",
          "usage": "--check[=<CHECK_TYPE>]"
        },
        {
          "name": "cmd",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[cmd]..."
        },
        {
          "name": "name",
          "short": "n",
          "long": "name",
          "aliases": null,
          "required": false,
          "help": "Executable file name",
          "usage": "--name <name>"
        },
        {
          "name": "root",
          "short": null,
          "long": "root",
          "aliases": null,
          "required": false,
          "help": "Installation root",
          "usage": "--root <root>"
        },
        {
          "name": "force",
          "short": "f",
          "long": "force",
          "aliases": null,
          "required": false,
          "help": "Forcefully overwrite existing installation",
          "usage": "--force"
        },
        {
          "name": "global",
          "short": "g",
          "long": "global",
          "aliases": null,
          "required": false,
          "help": "Install a package or script as a globally available executable",
          "usage": "--global"
        },
        {
          "name": "env-file",
          "short": null,
          "long": "env-file",
          "aliases": [],
          "required": false,
          "help": "Load environment variables from local file\n  Only the first environment variable with a given key is used.\n  Existing process environment variables are not overwritten.",
          "usage": "--env-file[=<FILE>]"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno install [OPTIONS] [cmd]..."
    },
    {
      "name": "json_reference",
      "about": null,
      "visible_aliases": [],
      "args": [],
      "subcommands": [],
      "usage": "Usage: deno json_reference [OPTIONS]"
    },
    {
      "name": "jupyter",
      "about": "Deno kernel for Jupyter notebooks",
      "visible_aliases": [],
      "args": [
        {
          "name": "install",
          "short": null,
          "long": "install",
          "aliases": null,
          "required": false,
          "help": "Installs kernelspec, requires 'jupyter' command to be available.",
          "usage": "--install"
        },
        {
          "name": "kernel",
          "short": null,
          "long": "kernel",
          "aliases": null,
          "required": false,
          "help": "Start the kernel",
          "usage": "--kernel"
        },
        {
          "name": "conn",
          "short": null,
          "long": "conn",
          "aliases": null,
          "required": false,
          "help": "Path to JSON file describing connection parameters, provided by Jupyter",
          "usage": "--conn <conn>"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno jupyter [OPTIONS]"
    },
    {
      "name": "uninstall",
      "about": "Uninstalls an executable script in the installation root's bin directory.\n\n  deno uninstall serve\n\nTo change the installation root, use --root:\n  deno uninstall --root /usr/local serve\n\nThe installation root is determined, in order of precedence:\n  - --root option\n  - DENO_INSTALL_ROOT environment variable\n  - $HOME/.deno",
      "visible_aliases": [],
      "args": [
        {
          "name": "name",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[name]"
        },
        {
          "name": "root",
          "short": null,
          "long": "root",
          "aliases": null,
          "required": false,
          "help": "Installation root",
          "usage": "--root <root>"
        },
        {
          "name": "global",
          "short": "g",
          "long": "global",
          "aliases": null,
          "required": false,
          "help": "Remove globally installed package or module",
          "usage": "--global"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno uninstall [OPTIONS] [name]"
    },
    {
      "name": "lsp",
      "about": "The 'deno lsp' subcommand provides a way for code editors and IDEs to\ninteract with Deno using the Language Server Protocol. Usually humans do not\nuse this subcommand directly. For example, 'deno lsp' can provide IDEs with\ngo-to-definition support and automatic code formatting.\n\nHow to connect various editors and IDEs to 'deno lsp':\nhttps://docs.deno.com/go/lsp",
      "visible_aliases": [],
      "args": [],
      "subcommands": [],
      "usage": "Usage: deno lsp [OPTIONS]"
    },
    {
      "name": "lint",
      "about": "Lint JavaScript/TypeScript source code.\n\n  deno lint\n  deno lint myfile1.ts myfile2.js\n\nPrint result as JSON:\n  deno lint --json\n\nRead from stdin:\n  cat file.ts | deno lint -\n  cat file.ts | deno lint --json -\n\nList available rules:\n  deno lint --rules\n\nIgnore diagnostics on the next line by preceding it with an ignore comment and\nrule name:\n  // deno-lint-ignore no-explicit-any\n  // deno-lint-ignore require-await no-empty\n\nNames of rules to ignore must be specified after ignore comment.\n\nIgnore linting a file by adding an ignore comment at the top of the file:\n  // deno-lint-ignore-file\n",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "fix",
          "short": null,
          "long": "fix",
          "aliases": null,
          "required": false,
          "help": "Fix any linting errors for rules that support it",
          "usage": "--fix"
        },
        {
          "name": "ext",
          "short": null,
          "long": "ext",
          "aliases": null,
          "required": false,
          "help": "Specify the file extension to lint when reading from stdin.For example, use `jsx` to lint JSX files or `tsx` for TSX files.This argument is necessary because stdin input does not automatically infer the file type.Example usage: `cat file.jsx | deno lint - --ext=jsx`.",
          "usage": "--ext=<EXT>"
        },
        {
          "name": "rules",
          "short": null,
          "long": "rules",
          "aliases": null,
          "required": false,
          "help": "List available rules",
          "usage": "--rules"
        },
        {
          "name": "rules-tags",
          "short": null,
          "long": "rules-tags",
          "aliases": null,
          "required": false,
          "help": "Use set of rules with a tag",
          "usage": "--rules-tags=<rules-tags>..."
        },
        {
          "name": "rules-include",
          "short": null,
          "long": "rules-include",
          "aliases": null,
          "required": false,
          "help": "Include lint rules",
          "usage": "--rules-include=<rules-include>..."
        },
        {
          "name": "rules-exclude",
          "short": null,
          "long": "rules-exclude",
          "aliases": null,
          "required": false,
          "help": "Exclude lint rules",
          "usage": "--rules-exclude=<rules-exclude>..."
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "ignore",
          "short": null,
          "long": "ignore",
          "aliases": null,
          "required": false,
          "help": "Ignore linting particular source files",
          "usage": "--ignore=<ignore>..."
        },
        {
          "name": "json",
          "short": null,
          "long": "json",
          "aliases": null,
          "required": false,
          "help": "Output lint result in JSON format",
          "usage": "--json"
        },
        {
          "name": "compact",
          "short": null,
          "long": "compact",
          "aliases": null,
          "required": false,
          "help": "Output lint result in compact format",
          "usage": "--compact"
        },
        {
          "name": "files",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[files]..."
        },
        {
          "name": "watch",
          "short": null,
          "long": "watch",
          "aliases": null,
          "required": false,
          "help": "Watch for file changes and restart process automatically.\n  Only local files from entry point module graph are watched.",
          "usage": "--watch"
        },
        {
          "name": "watch-exclude",
          "short": null,
          "long": "watch-exclude",
          "aliases": null,
          "required": false,
          "help": "Exclude provided files/patterns from watch mode",
          "usage": "--watch-exclude[=<FILES>...]"
        },
        {
          "name": "no-clear-screen",
          "short": null,
          "long": "no-clear-screen",
          "aliases": null,
          "required": false,
          "help": "Do not clear terminal screen when under watch mode",
          "usage": "--no-clear-screen"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno lint [OPTIONS] [files]..."
    },
    {
      "name": "publish",
      "about": "Publish the current working directory's package or workspace",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "token",
          "short": null,
          "long": "token",
          "aliases": null,
          "required": false,
          "help": "The API token to use when publishing. If unset, interactive authentication is be used",
          "usage": "--token <token>"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "dry-run",
          "short": null,
          "long": "dry-run",
          "aliases": null,
          "required": false,
          "help": "Prepare the package for publishing performing all checks and validations without uploading",
          "usage": "--dry-run"
        },
        {
          "name": "allow-slow-types",
          "short": null,
          "long": "allow-slow-types",
          "aliases": null,
          "required": false,
          "help": "Allow publishing with slow types",
          "usage": "--allow-slow-types"
        },
        {
          "name": "allow-dirty",
          "short": null,
          "long": "allow-dirty",
          "aliases": null,
          "required": false,
          "help": "Allow publishing if the repository has uncommitted changed",
          "usage": "--allow-dirty"
        },
        {
          "name": "no-provenance",
          "short": null,
          "long": "no-provenance",
          "aliases": null,
          "required": false,
          "help": "Disable provenance attestation.\n  Enabled by default on Github actions, publicly links the package to where it was built and published from.",
          "usage": "--no-provenance"
        },
        {
          "name": "check",
          "short": null,
          "long": "check",
          "aliases": null,
          "required": false,
          "help": "Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant\n  If the value of \"all\" is supplied, remote modules will be included.\n  Alternatively, the 'deno check' subcommand can be used",
          "usage": "--check[=<CHECK_TYPE>]"
        },
        {
          "name": "no-check",
          "short": null,
          "long": "no-check",
          "aliases": null,
          "required": false,
          "help": "Skip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored",
          "usage": "--no-check[=<NO_CHECK_TYPE>]"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno publish [OPTIONS]"
    },
    {
      "name": "repl",
      "about": "Read Eval Print Loop",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "env-file",
          "short": null,
          "long": "env-file",
          "aliases": [],
          "required": false,
          "help": "Load environment variables from local file\n  Only the first environment variable with a given key is used.\n  Existing process environment variables are not overwritten.",
          "usage": "--env-file[=<FILE>]"
        },
        {
          "name": "no-check",
          "short": null,
          "long": "no-check",
          "aliases": null,
          "required": false,
          "help": "Skip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored",
          "usage": "--no-check[=<NO_CHECK_TYPE>]"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        },
        {
          "name": "inspect",
          "short": null,
          "long": "inspect",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port [default: 127.0.0.1:9229]",
          "usage": "--inspect[=<HOST_AND_PORT>]"
        },
        {
          "name": "inspect-brk",
          "short": null,
          "long": "inspect-brk",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port, wait for debugger to connect and break at the start of user script",
          "usage": "--inspect-brk[=<HOST_AND_PORT>]"
        },
        {
          "name": "inspect-wait",
          "short": null,
          "long": "inspect-wait",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port and wait for debugger to connect before running user code",
          "usage": "--inspect-wait[=<HOST_AND_PORT>]"
        },
        {
          "name": "frozen",
          "short": null,
          "long": "frozen",
          "aliases": [],
          "required": false,
          "help": "Error out if lockfile is out of date",
          "usage": "--frozen[=<BOOLEAN>]"
        },
        {
          "name": "cached-only",
          "short": null,
          "long": "cached-only",
          "aliases": null,
          "required": false,
          "help": "Require that remote dependencies are already cached",
          "usage": "--cached-only"
        },
        {
          "name": "location",
          "short": null,
          "long": "location",
          "aliases": null,
          "required": false,
          "help": "Value of 'globalThis.location' used by some web APIs",
          "usage": "--location <HREF>"
        },
        {
          "name": "v8-flags",
          "short": null,
          "long": "v8-flags",
          "aliases": null,
          "required": false,
          "help": "To see a list of all available flags use --v8-flags=--help\n  Flags can also be set via the DENO_V8_FLAGS environment variable.\n  Any flags set with this flag are appended after the DENO_V8_FLAGS environment variable",
          "usage": "--v8-flags[=<V8_FLAGS>...]"
        },
        {
          "name": "seed",
          "short": null,
          "long": "seed",
          "aliases": null,
          "required": false,
          "help": "Set the random number generator seed",
          "usage": "--seed <NUMBER>"
        },
        {
          "name": "check",
          "short": null,
          "long": "check",
          "aliases": null,
          "required": false,
          "help": "Enable type-checking. This subcommand does not type-check by default\n  If the value of \"all\" is supplied, remote modules will be included.\n  Alternatively, the 'deno check' subcommand can be used",
          "usage": "--check[=<CHECK_TYPE>]"
        },
        {
          "name": "eval-file",
          "short": null,
          "long": "eval-file",
          "aliases": null,
          "required": false,
          "help": "Evaluates the provided file(s) as scripts when the REPL starts. Accepts file paths and URLs",
          "usage": "--eval-file=<eval-file>..."
        },
        {
          "name": "eval",
          "short": null,
          "long": "eval",
          "aliases": null,
          "required": false,
          "help": "Evaluates the provided code when the REPL starts",
          "usage": "--eval <code>"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno repl [OPTIONS]"
    },
    {
      "name": "task",
      "about": "Run a task defined in the configuration file\n\n  deno task build",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "cwd",
          "short": null,
          "long": "cwd",
          "aliases": null,
          "required": false,
          "help": "Specify the directory to run the task in",
          "usage": "--cwd <DIR>"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno task [OPTIONS] [TASK]"
    },
    {
      "name": "test",
      "about": "Run tests using Deno's built-in test runner.\n\nEvaluate the given modules, run all tests declared with 'Deno.test()' and\nreport results to standard output:\n  deno test src/fetch_test.ts src/signal_test.ts\n\nDirectory arguments are expanded to all contained files matching the glob\n{*_,*.,}test.{js,mjs,ts,mts,jsx,tsx} or **/__tests__/**:\n  deno test src/",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "no-check",
          "short": null,
          "long": "no-check",
          "aliases": null,
          "required": false,
          "help": "Skip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored",
          "usage": "--no-check[=<NO_CHECK_TYPE>]"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "no-remote",
          "short": null,
          "long": "no-remote",
          "aliases": null,
          "required": false,
          "help": "Do not resolve remote modules",
          "usage": "--no-remote"
        },
        {
          "name": "no-npm",
          "short": null,
          "long": "no-npm",
          "aliases": null,
          "required": false,
          "help": "Do not resolve npm modules",
          "usage": "--no-npm"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "no-lock",
          "short": null,
          "long": "no-lock",
          "aliases": null,
          "required": false,
          "help": "Disable auto discovery of the lock file",
          "usage": "--no-lock"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        },
        {
          "name": "inspect",
          "short": null,
          "long": "inspect",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port [default: 127.0.0.1:9229]",
          "usage": "--inspect[=<HOST_AND_PORT>]"
        },
        {
          "name": "inspect-brk",
          "short": null,
          "long": "inspect-brk",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port, wait for debugger to connect and break at the start of user script",
          "usage": "--inspect-brk[=<HOST_AND_PORT>]"
        },
        {
          "name": "inspect-wait",
          "short": null,
          "long": "inspect-wait",
          "aliases": null,
          "required": false,
          "help": "Activate inspector on host:port and wait for debugger to connect before running user code",
          "usage": "--inspect-wait[=<HOST_AND_PORT>]"
        },
        {
          "name": "frozen",
          "short": null,
          "long": "frozen",
          "aliases": [],
          "required": false,
          "help": "Error out if lockfile is out of date",
          "usage": "--frozen[=<BOOLEAN>]"
        },
        {
          "name": "cached-only",
          "short": null,
          "long": "cached-only",
          "aliases": null,
          "required": false,
          "help": "Require that remote dependencies are already cached",
          "usage": "--cached-only"
        },
        {
          "name": "location",
          "short": null,
          "long": "location",
          "aliases": null,
          "required": false,
          "help": "Value of 'globalThis.location' used by some web APIs",
          "usage": "--location <HREF>"
        },
        {
          "name": "v8-flags",
          "short": null,
          "long": "v8-flags",
          "aliases": null,
          "required": false,
          "help": "To see a list of all available flags use --v8-flags=--help\n  Flags can also be set via the DENO_V8_FLAGS environment variable.\n  Any flags set with this flag are appended after the DENO_V8_FLAGS environment variable",
          "usage": "--v8-flags[=<V8_FLAGS>...]"
        },
        {
          "name": "seed",
          "short": null,
          "long": "seed",
          "aliases": null,
          "required": false,
          "help": "Set the random number generator seed",
          "usage": "--seed <NUMBER>"
        },
        {
          "name": "check",
          "short": null,
          "long": "check",
          "aliases": null,
          "required": false,
          "help": "Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant\n  If the value of \"all\" is supplied, remote modules will be included.\n  Alternatively, the 'deno check' subcommand can be used",
          "usage": "--check[=<CHECK_TYPE>]"
        },
        {
          "name": "ignore",
          "short": null,
          "long": "ignore",
          "aliases": null,
          "required": false,
          "help": "Ignore files",
          "usage": "--ignore=<ignore>..."
        },
        {
          "name": "no-run",
          "short": null,
          "long": "no-run",
          "aliases": null,
          "required": false,
          "help": "Cache test modules, but don't run tests",
          "usage": "--no-run"
        },
        {
          "name": "trace-leaks",
          "short": null,
          "long": "trace-leaks",
          "aliases": null,
          "required": false,
          "help": "Enable tracing of leaks. Useful when debugging leaking ops in test, but impacts test execution time",
          "usage": "--trace-leaks"
        },
        {
          "name": "doc",
          "short": null,
          "long": "doc",
          "aliases": null,
          "required": false,
          "help": "Type-check code blocks in JSDoc and Markdown",
          "usage": "--doc"
        },
        {
          "name": "fail-fast",
          "short": null,
          "long": "fail-fast",
          "aliases": [],
          "required": false,
          "help": "Stop after N errors. Defaults to stopping after first failure",
          "usage": "--fail-fast[=<N>]"
        },
        {
          "name": "permit-no-files",
          "short": null,
          "long": "permit-no-files",
          "aliases": null,
          "required": false,
          "help": "Don't return an error code if no test files were found",
          "usage": "--permit-no-files"
        },
        {
          "name": "filter",
          "short": null,
          "long": "filter",
          "aliases": null,
          "required": false,
          "help": "Run tests with this string or regexp pattern in the test name",
          "usage": "--filter <filter>"
        },
        {
          "name": "shuffle",
          "short": null,
          "long": "shuffle",
          "aliases": null,
          "required": false,
          "help": "Shuffle the order in which the tests are run",
          "usage": "--shuffle[=<NUMBER>]"
        },
        {
          "name": "coverage",
          "short": null,
          "long": "coverage",
          "aliases": null,
          "required": false,
          "help": "Collect coverage profile data into DIR. If DIR is not specified, it uses 'coverage/'",
          "usage": "--coverage[=<DIR>]"
        },
        {
          "name": "clean",
          "short": null,
          "long": "clean",
          "aliases": null,
          "required": false,
          "help": "Empty the temporary coverage profile data directory before running tests.\n  Note: running multiple `deno test --clean` calls in series or parallel for the same coverage directory may cause race conditions.",
          "usage": "--clean"
        },
        {
          "name": "parallel",
          "short": null,
          "long": "parallel",
          "aliases": null,
          "required": false,
          "help": "Run test modules in parallel. Parallelism defaults to the number of available CPUs or the value of the DENO_JOBS environment variable",
          "usage": "--parallel"
        },
        {
          "name": "files",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": "List of file names to run",
          "usage": "[files]..."
        },
        {
          "name": "watch",
          "short": null,
          "long": "watch",
          "aliases": null,
          "required": false,
          "help": "Watch for file changes and restart process automatically.\n  Local files from entry point module graph are watched by default.\n  Additional paths might be watched by passing them as arguments to this flag.",
          "usage": "--watch[=<FILES>...]"
        },
        {
          "name": "watch-exclude",
          "short": null,
          "long": "watch-exclude",
          "aliases": null,
          "required": false,
          "help": "Exclude provided files/patterns from watch mode",
          "usage": "--watch-exclude[=<FILES>...]"
        },
        {
          "name": "no-clear-screen",
          "short": null,
          "long": "no-clear-screen",
          "aliases": null,
          "required": false,
          "help": "Do not clear terminal screen when under watch mode",
          "usage": "--no-clear-screen"
        },
        {
          "name": "script_arg",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": "Script arg",
          "usage": "[SCRIPT_ARG]..."
        },
        {
          "name": "junit-path",
          "short": null,
          "long": "junit-path",
          "aliases": null,
          "required": false,
          "help": "Write a JUnit XML test report to PATH. Use '-' to write to stdout which is the default when PATH is not provided",
          "usage": "--junit-path <PATH>"
        },
        {
          "name": "reporter",
          "short": null,
          "long": "reporter",
          "aliases": null,
          "required": false,
          "help": "Select reporter to use. Default to 'pretty'",
          "usage": "--reporter <reporter>"
        },
        {
          "name": "hide-stacktraces",
          "short": null,
          "long": "hide-stacktraces",
          "aliases": null,
          "required": false,
          "help": "Hide stack traces for errors in failure test results.",
          "usage": "--hide-stacktraces"
        },
        {
          "name": "env-file",
          "short": null,
          "long": "env-file",
          "aliases": [],
          "required": false,
          "help": "Load environment variables from local file\n  Only the first environment variable with a given key is used.\n  Existing process environment variables are not overwritten.",
          "usage": "--env-file[=<FILE>]"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno test [OPTIONS] [files]... [-- [SCRIPT_ARG]...]"
    },
    {
      "name": "types",
      "about": "Print runtime TypeScript declarations.\n\n  deno types > lib.deno.d.ts\n\nThe declaration file could be saved and used for typing information.",
      "visible_aliases": [],
      "args": [],
      "subcommands": [],
      "usage": "Usage: deno types [OPTIONS]"
    },
    {
      "name": "upgrade",
      "about": "Upgrade deno executable to the given version.\n\nLatest\n\n  deno upgrade\n\nSpecific version\n\n  deno upgrade 1.45.0\n  deno upgrade 1.46.0-rc.1\n  deno upgrade 9bc2dd29ad6ba334fd57a20114e367d3c04763d4\n\nChannel\n\n  deno upgrade stable\n  deno upgrade rc\n  deno upgrade canary\n\nThe version is downloaded from\nhttps://github.com/denoland/deno/releases\nand is used to replace the current executable.\n\nIf you want to not replace the current Deno executable but instead download an\nupdate to a different location, use the --output flag:\n  deno upgrade --output $HOME/my_deno",
      "visible_aliases": [],
      "args": [
        {
          "name": "output",
          "short": null,
          "long": "output",
          "aliases": null,
          "required": false,
          "help": "The path to output the updated version to",
          "usage": "--output <output>"
        },
        {
          "name": "dry-run",
          "short": null,
          "long": "dry-run",
          "aliases": null,
          "required": false,
          "help": "Perform all checks without replacing old exe",
          "usage": "--dry-run"
        },
        {
          "name": "force",
          "short": "f",
          "long": "force",
          "aliases": null,
          "required": false,
          "help": "Replace current exe even if not out-of-date",
          "usage": "--force"
        },
        {
          "name": "version-or-hash-or-channel",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": "Version (v1.46.0), channel (rc, canary) or commit hash (9bc2dd29ad6ba334fd57a20114e367d3c04763d4)",
          "usage": "[VERSION]..."
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno upgrade [OPTIONS] [VERSION]..."
    },
    {
      "name": "vendor",
      "about": "⚠️ Warning: `deno vendor` is deprecated and will be removed in Deno 2.0.\nAdd `\"vendor\": true` to your `deno.json` or use the `--vendor` flag instead.\n\nVendor remote modules into a local directory.\n\nAnalyzes the provided modules along with their dependencies, downloads\nremote modules to the output directory, and produces an import map that\nmaps remote specifiers to the downloaded files.\n  deno vendor main.ts\n  deno run --import-map vendor/import_map.json main.ts\n\nRemote modules and multiple modules may also be specified:\n  deno vendor main.ts test.deps.ts jsr:@std/path",
      "visible_aliases": [],
      "args": [
        {
          "name": "unstable",
          "short": null,
          "long": "unstable",
          "aliases": null,
          "required": false,
          "help": "Enable all unstable features and APIs. Instead of using this flag, consider enabling individual unstable features\n  To view the list of individual unstable feature flags, run this command again with --help=unstable",
          "usage": "--unstable"
        },
        {
          "name": "specifiers",
          "short": null,
          "long": null,
          "aliases": null,
          "required": false,
          "help": null,
          "usage": "[specifiers]..."
        },
        {
          "name": "output",
          "short": null,
          "long": "output",
          "aliases": null,
          "required": false,
          "help": "The directory to output the vendored modules to",
          "usage": "--output <output>"
        },
        {
          "name": "force",
          "short": "f",
          "long": "force",
          "aliases": null,
          "required": false,
          "help": "Forcefully overwrite conflicting files in existing output directory",
          "usage": "--force"
        },
        {
          "name": "no-config",
          "short": null,
          "long": "no-config",
          "aliases": null,
          "required": false,
          "help": "Disable automatic loading of the configuration file",
          "usage": "--no-config"
        },
        {
          "name": "config",
          "short": "c",
          "long": "config",
          "aliases": null,
          "required": false,
          "help": "Configure different aspects of deno including TypeScript, linting, and code formatting\n  Typically the configuration file will be called `deno.json` or `deno.jsonc` and\n  automatically detected; in that case this flag is not necessary.\n  Docs: https://docs.deno.com/go/config",
          "usage": "--config <FILE>"
        },
        {
          "name": "import-map",
          "short": null,
          "long": "import-map",
          "aliases": [],
          "required": false,
          "help": "Load import map file from local file or remote URL\n  Docs: https://docs.deno.com/runtime/manual/basics/import_maps",
          "usage": "--import-map <FILE>"
        },
        {
          "name": "lock",
          "short": null,
          "long": "lock",
          "aliases": null,
          "required": false,
          "help": "Check the specified lock file. (If value is not provided, defaults to \"./deno.lock\")",
          "usage": "--lock [<FILE>]"
        },
        {
          "name": "node-modules-dir",
          "short": null,
          "long": "node-modules-dir",
          "aliases": null,
          "required": false,
          "help": "Enables or disables the use of a local node_modules folder for npm packages",
          "usage": "--node-modules-dir[=<DIRECTORY>]"
        },
        {
          "name": "vendor",
          "short": null,
          "long": "vendor",
          "aliases": null,
          "required": false,
          "help": "Toggles local vendor folder usage for remote modules and a node_modules folder for npm packages",
          "usage": "--vendor[=<vendor>]"
        },
        {
          "name": "reload",
          "short": "r",
          "long": "reload",
          "aliases": null,
          "required": false,
          "help": "Reload source code cache (recompile TypeScript)\n  no value                                                 Reload everything\n  jsr:@std/http/file-server,jsr:@std/assert/assert-equals  Reloads specific modules\n  npm:                                                     Reload all npm modules\n  npm:chalk                                                Reload specific npm module",
          "usage": "--reload[=<CACHE_BLOCKLIST>...]"
        },
        {
          "name": "cert",
          "short": null,
          "long": "cert",
          "aliases": null,
          "required": false,
          "help": "Load certificate authority from PEM encoded file",
          "usage": "--cert <FILE>"
        }
      ],
      "subcommands": [],
      "usage": "Usage: deno vendor [OPTIONS] [specifiers]..."
    },
    {
      "name": "help",
      "about": null,
      "visible_aliases": [],
      "args": [],
      "subcommands": [
        {
          "name": "run",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help run [OPTIONS]"
        },
        {
          "name": "serve",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help serve [OPTIONS]"
        },
        {
          "name": "add",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help add [OPTIONS]"
        },
        {
          "name": "remove",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help remove [OPTIONS]"
        },
        {
          "name": "bench",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help bench [OPTIONS]"
        },
        {
          "name": "bundle",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help bundle [OPTIONS]"
        },
        {
          "name": "cache",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help cache [OPTIONS]"
        },
        {
          "name": "check",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help check [OPTIONS]"
        },
        {
          "name": "clean",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help clean [OPTIONS]"
        },
        {
          "name": "compile",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help compile [OPTIONS]"
        },
        {
          "name": "completions",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help completions [OPTIONS]"
        },
        {
          "name": "coverage",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help coverage [OPTIONS]"
        },
        {
          "name": "doc",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help doc [OPTIONS]"
        },
        {
          "name": "eval",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help eval [OPTIONS]"
        },
        {
          "name": "fmt",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help fmt [OPTIONS]"
        },
        {
          "name": "init",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help init [OPTIONS]"
        },
        {
          "name": "info",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help info [OPTIONS]"
        },
        {
          "name": "install",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help install [OPTIONS]"
        },
        {
          "name": "json_reference",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help json_reference [OPTIONS]"
        },
        {
          "name": "jupyter",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help jupyter [OPTIONS]"
        },
        {
          "name": "uninstall",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help uninstall [OPTIONS]"
        },
        {
          "name": "lsp",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help lsp [OPTIONS]"
        },
        {
          "name": "lint",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help lint [OPTIONS]"
        },
        {
          "name": "publish",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help publish [OPTIONS]"
        },
        {
          "name": "repl",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help repl [OPTIONS]"
        },
        {
          "name": "task",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help task [OPTIONS]"
        },
        {
          "name": "test",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help test [OPTIONS]"
        },
        {
          "name": "types",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help types [OPTIONS]"
        },
        {
          "name": "upgrade",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help upgrade [OPTIONS]"
        },
        {
          "name": "vendor",
          "about": null,
          "visible_aliases": [],
          "args": [],
          "subcommands": [],
          "usage": "Usage: deno help vendor [OPTIONS]"
        }
      ],
      "usage": "Usage: deno help [OPTIONS] [COMMAND]"
    }
  ],
  "usage": "Usage: deno [OPTIONS] [COMMAND]"
}
